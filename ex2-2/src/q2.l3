(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
          lst2
          (if (empty? lst2)
              lst1
          (cons (car lst1) (append (cdr lst1) lst2))))
  )
)

(define reverse 
  (lambda (lst)
         (if (empty? lst)
            '()
            ((cons (car (reverse (cdr lst))))))
  )
)

(define duplicate-items
   (lambda(lst dup-count)
      (if (empty? dup-count)
          lst
          (let ((lstSize (length lst)) (dupSize (length dup-count)))
            (if (>= lstSize dupSize)
                (helper lst (extendDup dup-count lstSize) (car dup-count) '())
                (helper lst dup-count (car dup-count) '()));end if
            );end let
          )
     )
  )


(define payment
  (lambda (n coins-lst)
        @TODO
  )
)
                               
(define compose-n
  (lambda( f n)
        @TODO
  )
)

(define length
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (length (cdr lst))))
    )
  )

(define extendDup
  (lambda (lst size)
    (if (> (length lst) size)
        lst
        (extendDup (append lst lst) size))
    )
  )

(define helper
  (lambda (lst1 lst2 num answer-list)
    (if (empty? lst1)
    answer-list
    (if (> num 0)
        (helper lst1 lst2 (- num 1) (append answer-list (cons (car lst1) '())))
        (helper (cdr lst1) (cdr lst2) (car (cdr lst2)) answer-list)))
    )
  )