(define empty?
   (lambda (x)
      (eq? x '())))

(define length
  (lambda (lst)
    (if (empty? lst)
        0
        (+ 1 (length (cdr lst))))
    )
  )

(define remove-all-dup
  (lambda (x lst)
    (if (empty? lst)
        '()
    (if (= (car lst) x)
        (remove-all-dup x (cdr lst))
    (cons (car lst) 
          (remove-all-dup x (cdr lst)))))))

(define extendDup
  (lambda (lst size)
    (if (> (length lst) size)
        lst
        (extendDup (append lst lst) size))
    )
  )

(define helper
  (lambda (lst1 lst2 num answer-list)
    (if (empty? lst1)
    answer-list
    (if (> num 0)
        (helper lst1 lst2 (- num 1) (append answer-list (cons (car lst1) '())))
        (helper (cdr lst1) (cdr lst2) (car (cdr lst2)) answer-list)))
    )
  )

(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
          lst2
          (cons (car lst1) (append (cdr lst1) lst2)))
  )
)

(define reverse 
  (lambda (lst)
         (if (empty? lst)
            '()
            (append (reverse (cdr lst)) (list (car lst))))
  )
)

(define duplicate-items
  (lambda (lst dup-count)
    (if (empty? dup-count)
        lst
        (if (or (> (length lst) (length dup-count)) (= (length lst) (length dup-count)))
                (helper lst (extendDup dup-count (length lst)) (car dup-count) '())
                (helper lst dup-count (car dup-count) '())))
    )
  )

(define payment
    (lambda (n coins-lst)
        (if (< n 0)
            0
        (if (= n 0)
            1
        (if (and (> n 0) (empty? coins-lst))
            0
        (+ (payment  (- n (car coins-lst))  (cdr coins-lst)) 
           (payment n (remove-all-dup (car coins-lst) coins-lst))))))))

(define compose-n-helper
  (lambda (f count x)
    (if (= count 1)
        (f x)
        (compose-n-helper f (- count 1) (f x))
        )
    )
  )

(define compose-n
  (lambda(f n)
       (lambda (x)
         (compose-n-helper f n x)
        )
  )
)